{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Laboratory Management System\n\n## Overview\n\nThis is a comprehensive Laboratory Management System built for healthcare facilities to manage patient information, medical tests, and administrative operations. The application provides secure admin authentication, patient management, various medical test types (CBC, LFT, RFT, Lipid Profile, Blood Sugar, Thyroid, Urine Analysis, Cardiac Markers, Electrolytes), and features editable ID systems with password protection for enhanced security.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: Radix UI primitives with shadcn/ui design system for consistent, accessible components\n- **Styling**: Tailwind CSS with custom medical theme colors and variables\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **Session Management**: Express sessions with configurable storage (memory-based with PostgreSQL session store support)\n- **Authentication**: BCrypt for password hashing with session-based authentication\n- **API Design**: RESTful API structure with consistent error handling middleware\n\n### Database Layer\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured via Neon serverless)\n- **Migrations**: Drizzle Kit for schema management and migrations\n- **Schema Design**: Normalized tables for admin users, patients, tests, and audit logging\n\n### Security Features\n- **Password Protection**: BCrypt hashing with salt rounds\n- **Session Security**: HTTP-only cookies with secure flags in production\n- **ID Edit Protection**: Admin password verification required for Patient ID and Test ID modifications\n- **Audit Logging**: Complete change tracking for ID modifications with user attribution\n\n### Development Tools\n- **Build System**: Vite for fast development and optimized production builds\n- **Development Server**: Hot module replacement and error overlay integration\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n- **Styling**: PostCSS with Tailwind CSS for utility-first styling\n\n### Application Features\n- **Auto-generated IDs**: Sequential patient IDs (PAT001, PAT002) and test IDs (TEST001, TEST002)\n- **Protected ID Editing**: Password-verified ID modification with audit trail\n- **Multi-test Support**: Nine different medical test types with customized input forms\n- **Dashboard Analytics**: Real-time statistics for tests, patients, and critical results\n- **Responsive Design**: Mobile-first approach with professional medical theme\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle ORM**: Type-safe database operations and schema management\n\n### UI and Styling\n- **Radix UI**: Accessible component primitives for complex UI interactions\n- **Tailwind CSS**: Utility-first CSS framework with custom medical color scheme\n- **Lucide React**: Medical and laboratory-themed icon library\n\n### Authentication and Security\n- **BCryptjs**: Password hashing and verification\n- **Express Session**: Session management with PostgreSQL session store support\n\n### Development and Build Tools\n- **Vite**: Fast build tool with React plugin support\n- **TypeScript**: Type safety across frontend and backend\n- **React Query**: Server state management and caching\n- **React Hook Form**: Form handling with Zod schema validation\n\n### Hosting and Runtime\n- **Express.js**: Web server framework for API endpoints\n- **Node.js**: JavaScript runtime environment\n- **Replit Integration**: Development environment with cartographer plugin support","size_bytes":4039},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport bcrypt from \"bcrypt\";\nimport session from \"express-session\";\nimport { loginSchema, changePasswordSchema, insertPatientSchema, insertTestSchema } from \"@shared/schema\";\n\ndeclare module 'express-session' {\n  interface SessionData {\n    adminId?: number;\n    username?: string;\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Session configuration\n  app.use(session({\n    secret: process.env.SESSION_SECRET || 'lab-management-secret-key',\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  }));\n\n  // Auth middleware\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.session.adminId) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    next();\n  };\n\n  // Login\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { username, password, rememberMe } = loginSchema.parse(req.body);\n      \n      const admin = await storage.getAdminUserByUsername(username);\n      if (!admin) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, admin.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Update last login\n      await storage.updateLastLogin(admin.id);\n\n      // Set session\n      req.session.adminId = admin.id;\n      req.session.username = admin.username;\n\n      if (rememberMe) {\n        req.session.cookie.maxAge = 30 * 24 * 60 * 60 * 1000; // 30 days\n      }\n\n      res.json({ \n        message: \"Login successful\",\n        user: {\n          id: admin.id,\n          username: admin.username\n        }\n      });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Logout\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Could not log out\" });\n      }\n      res.json({ message: \"Logout successful\" });\n    });\n  });\n\n  // Get current user\n  app.get(\"/api/auth/me\", requireAuth, async (req, res) => {\n    try {\n      const admin = await storage.getAdminUser(req.session.adminId!);\n      if (!admin) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json({\n        id: admin.id,\n        username: admin.username\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Change password\n  app.post(\"/api/auth/change-password\", requireAuth, async (req, res) => {\n    try {\n      const { currentPassword, newPassword } = changePasswordSchema.parse(req.body);\n      \n      const admin = await storage.getAdminUser(req.session.adminId!);\n      if (!admin) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(currentPassword, admin.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Current password is incorrect\" });\n      }\n\n      const newPasswordHash = await bcrypt.hash(newPassword, 10);\n      await storage.updateAdminUserPassword(admin.id, newPasswordHash);\n\n      res.json({ message: \"Password changed successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Verify password for ID editing\n  app.post(\"/api/auth/verify-password\", requireAuth, async (req, res) => {\n    try {\n      const { password } = req.body;\n      \n      const admin = await storage.getAdminUser(req.session.adminId!);\n      if (!admin) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, admin.passwordHash);\n      res.json({ valid: isValidPassword });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", requireAuth, async (req, res) => {\n    try {\n      const [todayTests, totalPatients, pendingReports, criticalResults] = await Promise.all([\n        storage.getTodayTestsCount(),\n        storage.getTotalPatientsCount(),\n        storage.getPendingReportsCount(),\n        storage.getCriticalResultsCount()\n      ]);\n\n      res.json({\n        todayTests,\n        totalPatients,\n        pendingReports,\n        criticalResults\n      });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Patients\n  app.get(\"/api/patients\", requireAuth, async (req, res) => {\n    try {\n      const patients = await storage.getAllPatients();\n      res.json(patients);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/patients/next-id\", requireAuth, async (req, res) => {\n    try {\n      const nextId = await storage.getNextPatientId();\n      res.json({ nextId });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/patients\", requireAuth, async (req, res) => {\n    try {\n      const patientData = insertPatientSchema.parse(req.body);\n      patientData.createdBy = req.session.adminId;\n      patientData.modifiedBy = req.session.adminId;\n      \n      const patient = await storage.createPatient(patientData);\n      res.json(patient);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/patients/:id/patient-id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { newPatientId } = req.body;\n      \n      await storage.updatePatientId(parseInt(id), newPatientId, req.session.adminId!);\n      res.json({ message: \"Patient ID updated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Tests\n  app.get(\"/api/tests\", requireAuth, async (req, res) => {\n    try {\n      const tests = await storage.getAllTests();\n      res.json(tests);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get(\"/api/tests/next-id\", requireAuth, async (req, res) => {\n    try {\n      const nextId = await storage.getNextTestId();\n      res.json({ nextId });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post(\"/api/tests\", requireAuth, async (req, res) => {\n    try {\n      const testData = insertTestSchema.parse(req.body);\n      testData.performedBy = req.session.adminId;\n      testData.modifiedBy = req.session.adminId;\n      \n      const test = await storage.createTest(testData);\n      res.json(test);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.put(\"/api/tests/:id/test-id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { newTestId } = req.body;\n      \n      await storage.updateTestId(parseInt(id), newTestId, req.session.adminId!);\n      res.json({ message: \"Test ID updated successfully\" });\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  // Audit logs\n  app.get(\"/api/audit/id-changes\", requireAuth, async (req, res) => {\n    try {\n      const logs = await storage.getIdChangeLogs();\n      res.json(logs);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7770},"server/storage.ts":{"content":"import { type AdminUser, type InsertAdminUser, type Patient, type InsertPatient, type Test, type InsertTest, type IdChangeLog, type InsertIdChangeLog } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Admin users\n  getAdminUser(id: number): Promise<AdminUser | undefined>;\n  getAdminUserByUsername(username: string): Promise<AdminUser | undefined>;\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  updateAdminUserPassword(id: number, passwordHash: string): Promise<void>;\n  updateLastLogin(id: number): Promise<void>;\n\n  // Patients\n  getPatient(id: number): Promise<Patient | undefined>;\n  getPatientByPatientId(patientId: string): Promise<Patient | undefined>;\n  getAllPatients(): Promise<Patient[]>;\n  createPatient(patient: InsertPatient): Promise<Patient>;\n  updatePatient(id: number, patient: Partial<InsertPatient>): Promise<Patient>;\n  getNextPatientId(): Promise<string>;\n  updatePatientId(id: number, newPatientId: string, adminId: number): Promise<void>;\n\n  // Tests\n  getTest(id: number): Promise<Test | undefined>;\n  getTestByTestId(testId: string): Promise<Test | undefined>;\n  getAllTests(): Promise<Test[]>;\n  getTestsByPatient(patientId: number): Promise<Test[]>;\n  createTest(test: InsertTest): Promise<Test>;\n  updateTest(id: number, test: Partial<InsertTest>): Promise<Test>;\n  getNextTestId(): Promise<string>;\n  updateTestId(id: number, newTestId: string, adminId: number): Promise<void>;\n\n  // Audit log\n  createIdChangeLog(log: InsertIdChangeLog): Promise<IdChangeLog>;\n  getIdChangeLogs(): Promise<IdChangeLog[]>;\n\n  // Stats\n  getTodayTestsCount(): Promise<number>;\n  getTotalPatientsCount(): Promise<number>;\n  getPendingReportsCount(): Promise<number>;\n  getCriticalResultsCount(): Promise<number>;\n}\n\nexport class MemStorage implements IStorage {\n  private adminUsers: Map<number, AdminUser>;\n  private patients: Map<number, Patient>;\n  private tests: Map<number, Test>;\n  private idChangeLogs: Map<number, IdChangeLog>;\n  private nextId: number;\n\n  constructor() {\n    this.adminUsers = new Map();\n    this.patients = new Map();\n    this.tests = new Map();\n    this.idChangeLogs = new Map();\n    this.nextId = 1;\n\n    // Create default admin user\n    this.initializeDefaultAdmin();\n  }\n\n  private async initializeDefaultAdmin(): Promise<void> {\n    const passwordHash = await bcrypt.hash(\"admin123\", 10);\n    const admin: AdminUser = {\n      id: 1,\n      username: \"admin\",\n      passwordHash,\n      createdAt: new Date(),\n      lastLogin: null,\n      passwordChangedAt: new Date(),\n    };\n    this.adminUsers.set(1, admin);\n    this.nextId = 2;\n  }\n\n  // Admin users\n  async getAdminUser(id: number): Promise<AdminUser | undefined> {\n    return this.adminUsers.get(id);\n  }\n\n  async getAdminUserByUsername(username: string): Promise<AdminUser | undefined> {\n    return Array.from(this.adminUsers.values()).find(user => user.username === username);\n  }\n\n  async createAdminUser(insertUser: InsertAdminUser): Promise<AdminUser> {\n    const id = this.nextId++;\n    const user: AdminUser = {\n      ...insertUser,\n      id,\n      createdAt: new Date(),\n      lastLogin: null,\n      passwordChangedAt: new Date(),\n    };\n    this.adminUsers.set(id, user);\n    return user;\n  }\n\n  async updateAdminUserPassword(id: number, passwordHash: string): Promise<void> {\n    const user = this.adminUsers.get(id);\n    if (user) {\n      user.passwordHash = passwordHash;\n      user.passwordChangedAt = new Date();\n      this.adminUsers.set(id, user);\n    }\n  }\n\n  async updateLastLogin(id: number): Promise<void> {\n    const user = this.adminUsers.get(id);\n    if (user) {\n      user.lastLogin = new Date();\n      this.adminUsers.set(id, user);\n    }\n  }\n\n  // Patients\n  async getPatient(id: number): Promise<Patient | undefined> {\n    return this.patients.get(id);\n  }\n\n  async getPatientByPatientId(patientId: string): Promise<Patient | undefined> {\n    return Array.from(this.patients.values()).find(patient => patient.patientId === patientId);\n  }\n\n  async getAllPatients(): Promise<Patient[]> {\n    return Array.from(this.patients.values());\n  }\n\n  async createPatient(insertPatient: InsertPatient): Promise<Patient> {\n    const id = this.nextId++;\n    const patient: Patient = {\n      ...insertPatient,\n      id,\n      createdAt: new Date(),\n      lastModified: new Date(),\n    };\n    this.patients.set(id, patient);\n    return patient;\n  }\n\n  async updatePatient(id: number, updateData: Partial<InsertPatient>): Promise<Patient> {\n    const patient = this.patients.get(id);\n    if (!patient) {\n      throw new Error(\"Patient not found\");\n    }\n    const updated: Patient = {\n      ...patient,\n      ...updateData,\n      lastModified: new Date(),\n    };\n    this.patients.set(id, updated);\n    return updated;\n  }\n\n  async getNextPatientId(): Promise<string> {\n    const patients = Array.from(this.patients.values());\n    const maxNum = patients.reduce((max, patient) => {\n      const match = patient.patientId.match(/PAT(\\d+)/);\n      return match ? Math.max(max, parseInt(match[1])) : max;\n    }, 0);\n    return `PAT${String(maxNum + 1).padStart(3, '0')}`;\n  }\n\n  async updatePatientId(id: number, newPatientId: string, adminId: number): Promise<void> {\n    const patient = this.patients.get(id);\n    if (!patient) {\n      throw new Error(\"Patient not found\");\n    }\n    \n    // Check if new ID already exists\n    const existing = await this.getPatientByPatientId(newPatientId);\n    if (existing && existing.id !== id) {\n      throw new Error(\"Patient ID already exists\");\n    }\n\n    const oldId = patient.patientId;\n    patient.patientId = newPatientId;\n    patient.lastModified = new Date();\n    patient.modifiedBy = adminId;\n    this.patients.set(id, patient);\n\n    // Create audit log\n    await this.createIdChangeLog({\n      tableName: \"patients\",\n      recordId: id,\n      oldId,\n      newId: newPatientId,\n      changedBy: adminId,\n      reason: \"Admin ID change\",\n    });\n  }\n\n  // Tests\n  async getTest(id: number): Promise<Test | undefined> {\n    return this.tests.get(id);\n  }\n\n  async getTestByTestId(testId: string): Promise<Test | undefined> {\n    return Array.from(this.tests.values()).find(test => test.testId === testId);\n  }\n\n  async getAllTests(): Promise<Test[]> {\n    return Array.from(this.tests.values());\n  }\n\n  async getTestsByPatient(patientId: number): Promise<Test[]> {\n    return Array.from(this.tests.values()).filter(test => test.patientId === patientId);\n  }\n\n  async createTest(insertTest: InsertTest): Promise<Test> {\n    const id = this.nextId++;\n    const test: Test = {\n      ...insertTest,\n      id,\n      createdAt: new Date(),\n      lastModified: new Date(),\n    };\n    this.tests.set(id, test);\n    return test;\n  }\n\n  async updateTest(id: number, updateData: Partial<InsertTest>): Promise<Test> {\n    const test = this.tests.get(id);\n    if (!test) {\n      throw new Error(\"Test not found\");\n    }\n    const updated: Test = {\n      ...test,\n      ...updateData,\n      lastModified: new Date(),\n    };\n    this.tests.set(id, updated);\n    return updated;\n  }\n\n  async getNextTestId(): Promise<string> {\n    const tests = Array.from(this.tests.values());\n    const maxNum = tests.reduce((max, test) => {\n      const match = test.testId.match(/TEST(\\d+)/);\n      return match ? Math.max(max, parseInt(match[1])) : max;\n    }, 0);\n    return `TEST${String(maxNum + 1).padStart(3, '0')}`;\n  }\n\n  async updateTestId(id: number, newTestId: string, adminId: number): Promise<void> {\n    const test = this.tests.get(id);\n    if (!test) {\n      throw new Error(\"Test not found\");\n    }\n    \n    // Check if new ID already exists\n    const existing = await this.getTestByTestId(newTestId);\n    if (existing && existing.id !== id) {\n      throw new Error(\"Test ID already exists\");\n    }\n\n    const oldId = test.testId;\n    test.testId = newTestId;\n    test.lastModified = new Date();\n    test.modifiedBy = adminId;\n    this.tests.set(id, test);\n\n    // Create audit log\n    await this.createIdChangeLog({\n      tableName: \"tests\",\n      recordId: id,\n      oldId,\n      newId: newTestId,\n      changedBy: adminId,\n      reason: \"Admin ID change\",\n    });\n  }\n\n  // Audit log\n  async createIdChangeLog(insertLog: InsertIdChangeLog): Promise<IdChangeLog> {\n    const id = this.nextId++;\n    const log: IdChangeLog = {\n      ...insertLog,\n      id,\n      changedAt: new Date(),\n    };\n    this.idChangeLogs.set(id, log);\n    return log;\n  }\n\n  async getIdChangeLogs(): Promise<IdChangeLog[]> {\n    return Array.from(this.idChangeLogs.values());\n  }\n\n  // Stats\n  async getTodayTestsCount(): Promise<number> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    return Array.from(this.tests.values()).filter(test => {\n      const testDate = new Date(test.createdAt!);\n      testDate.setHours(0, 0, 0, 0);\n      return testDate.getTime() === today.getTime();\n    }).length;\n  }\n\n  async getTotalPatientsCount(): Promise<number> {\n    return this.patients.size;\n  }\n\n  async getPendingReportsCount(): Promise<number> {\n    return Array.from(this.tests.values()).filter(test => test.status === \"pending\").length;\n  }\n\n  async getCriticalResultsCount(): Promise<number> {\n    return Array.from(this.tests.values()).filter(test => {\n      const flags = test.flags as any;\n      return flags && Object.values(flags).some((flag: any) => flag === \"CRITICAL\");\n    }).length;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":9467},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, jsonb, serial, date, time } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Admin Users Table\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: serial(\"id\").primaryKey(),\n  username: varchar(\"username\", { length: 50 }).notNull().unique(),\n  passwordHash: varchar(\"password_hash\", { length: 255 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastLogin: timestamp(\"last_login\"),\n  passwordChangedAt: timestamp(\"password_changed_at\").defaultNow(),\n});\n\n// Patients Table\nexport const patients = pgTable(\"patients\", {\n  id: serial(\"id\").primaryKey(),\n  patientId: varchar(\"patient_id\", { length: 20 }).notNull().unique(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  age: integer(\"age\"),\n  gender: varchar(\"gender\", { length: 10 }),\n  phone: varchar(\"phone\", { length: 15 }),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  createdBy: integer(\"created_by\").references(() => adminUsers.id),\n  lastModified: timestamp(\"last_modified\").defaultNow(),\n  modifiedBy: integer(\"modified_by\").references(() => adminUsers.id),\n});\n\n// Tests Table\nexport const tests = pgTable(\"tests\", {\n  id: serial(\"id\").primaryKey(),\n  testId: varchar(\"test_id\", { length: 20 }).notNull().unique(),\n  patientId: integer(\"patient_id\").references(() => patients.id),\n  testType: varchar(\"test_type\", { length: 50 }).notNull(),\n  testResults: jsonb(\"test_results\").notNull(),\n  normalRanges: jsonb(\"normal_ranges\").notNull(),\n  flags: jsonb(\"flags\"), // HIGH/LOW/NORMAL/CRITICAL flags\n  testDate: date(\"test_date\").defaultNow(),\n  testTime: time(\"test_time\").defaultNow(),\n  status: varchar(\"status\", { length: 20 }).default(\"completed\"),\n  performedBy: integer(\"performed_by\").references(() => adminUsers.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastModified: timestamp(\"last_modified\").defaultNow(),\n  modifiedBy: integer(\"modified_by\").references(() => adminUsers.id),\n});\n\n// ID Change Audit Log Table\nexport const idChangeLog = pgTable(\"id_change_log\", {\n  id: serial(\"id\").primaryKey(),\n  tableName: varchar(\"table_name\", { length: 20 }).notNull(),\n  recordId: integer(\"record_id\").notNull(),\n  oldId: varchar(\"old_id\", { length: 20 }).notNull(),\n  newId: varchar(\"new_id\", { length: 20 }).notNull(),\n  changedBy: integer(\"changed_by\").references(() => adminUsers.id),\n  changedAt: timestamp(\"changed_at\").defaultNow(),\n  reason: text(\"reason\"),\n});\n\n// Test Templates Table\nexport const testTemplates = pgTable(\"test_templates\", {\n  id: serial(\"id\").primaryKey(),\n  testType: varchar(\"test_type\", { length: 50 }).notNull(),\n  parameters: jsonb(\"parameters\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n  lastLogin: true,\n  passwordChangedAt: true,\n});\n\nexport const insertPatientSchema = createInsertSchema(patients).omit({\n  id: true,\n  createdAt: true,\n  lastModified: true,\n});\n\nexport const insertTestSchema = createInsertSchema(tests).omit({\n  id: true,\n  createdAt: true,\n  lastModified: true,\n});\n\nexport const insertIdChangeLogSchema = createInsertSchema(idChangeLog).omit({\n  id: true,\n  changedAt: true,\n});\n\nexport const insertTestTemplateSchema = createInsertSchema(testTemplates).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type AdminUser = typeof adminUsers.$inferSelect;\n\nexport type InsertPatient = z.infer<typeof insertPatientSchema>;\nexport type Patient = typeof patients.$inferSelect;\n\nexport type InsertTest = z.infer<typeof insertTestSchema>;\nexport type Test = typeof tests.$inferSelect;\n\nexport type InsertIdChangeLog = z.infer<typeof insertIdChangeLogSchema>;\nexport type IdChangeLog = typeof idChangeLog.$inferSelect;\n\nexport type InsertTestTemplate = z.infer<typeof insertTestTemplateSchema>;\nexport type TestTemplate = typeof testTemplates.$inferSelect;\n\n// Login schema\nexport const loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n  rememberMe: z.boolean().optional(),\n});\n\nexport type LoginData = z.infer<typeof loginSchema>;\n\n// Change password schema\nexport const changePasswordSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"Password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Please confirm your password\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type ChangePasswordData = z.infer<typeof changePasswordSchema>;\n","size_bytes":4878},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Login from \"@/pages/login\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Patients from \"@/pages/patients\";\nimport CBCTest from \"@/pages/tests/cbc\";\nimport LFTTest from \"@/pages/tests/lft\";\nimport RFTTest from \"@/pages/tests/rft\";\nimport LipidTest from \"@/pages/tests/lipid\";\nimport SugarTest from \"@/pages/tests/sugar\";\nimport ThyroidTest from \"@/pages/tests/thyroid\";\nimport UrineTest from \"@/pages/tests/urine\";\nimport CardiacTest from \"@/pages/tests/cardiac\";\nimport ElectrolytesTest from \"@/pages/tests/electrolytes\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction ProtectedRoute({ children }: { children: React.ReactNode }) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-cyan-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-slate-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        {children}\n      </div>\n    </div>\n  );\n}\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 to-cyan-50\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-slate-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Login />;\n  }\n\n  return (\n    <div className=\"flex min-h-screen bg-slate-50\">\n      <Sidebar />\n      <div className=\"flex-1 ml-64\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/patients\" component={Patients} />\n          <Route path=\"/tests/cbc\" component={CBCTest} />\n          <Route path=\"/tests/lft\" component={LFTTest} />\n          <Route path=\"/tests/rft\" component={RFTTest} />\n          <Route path=\"/tests/lipid\" component={LipidTest} />\n          <Route path=\"/tests/sugar\" component={SugarTest} />\n          <Route path=\"/tests/thyroid\" component={ThyroidTest} />\n          <Route path=\"/tests/urine\" component={UrineTest} />\n          <Route path=\"/tests/cardiac\" component={CardiacTest} />\n          <Route path=\"/tests/electrolytes\" component={ElectrolytesTest} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3257},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(186.1538 100% 35.0980%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(217.2549 91.2281% 59.8039%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(188.5714 77.7778% 94.1176%);\n  --accent-foreground: hsl(186.1538 100% 35.0980%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(186.1538 100% 35.0980%);\n  --chart-1: hsl(186.1538 100% 35.0980%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(186.1538 100% 35.0980%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(188.5714 77.7778% 94.1176%);\n  --sidebar-accent-foreground: hsl(186.1538 100% 35.0980%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(186.1538 100% 35.0980%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --medical-primary: hsl(186.1538 100% 35.0980%);\n  --medical-primary-dark: hsl(184.4444 100% 28.2353%);\n  --medical-secondary: hsl(217.2549 91.2281% 59.8039%);\n  --medical-accent: hsl(159.7826 100% 36.0784%);\n  --medical-danger: hsl(356.3033 90.5579% 54.3137%);\n  --medical-warning: hsl(42.0290 92.8251% 56.2745%);\n  --medical-success: hsl(147.1429 78.5047% 41.9608%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 1px 2px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 1px 2px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 2px 4px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 4px 6px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 8px 10px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(186.1538 100% 35.0980%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(186.1538 100% 35.0980%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(186.1538 100% 35.0980%);\n  --chart-1: hsl(186.1538 100% 35.0980%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(186.1538 100% 35.0980%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(186.1538 100% 35.0980%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(186.1538 100% 35.0980%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --medical-primary: hsl(186.1538 100% 35.0980%);\n  --medical-primary-dark: hsl(184.4444 100% 28.2353%);\n  --medical-secondary: hsl(217.2549 91.2281% 59.8039%);\n  --medical-accent: hsl(159.7826 100% 36.0784%);\n  --medical-danger: hsl(356.3033 90.5579% 54.3137%);\n  --medical-warning: hsl(42.0290 92.8251% 56.2745%);\n  --medical-success: hsl(147.1429 78.5047% 41.9608%);\n  --shadow-2xs: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 1px 2px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 1px 2px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 2px 4px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 4px 6px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00), 0px 8px 10px -1px hsl(186.1538 100% 35.0980% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(186.1538 100% 35.0980% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .medical-gradient {\n    background: linear-gradient(135deg, var(--medical-primary), var(--medical-secondary));\n  }\n}\n","size_bytes":5879},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { LoginData, ChangePasswordData } from \"@shared/schema\";\n\ninterface User {\n  id: number;\n  username: string;\n}\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/auth/me\"], null);\n      queryClient.clear();\n    },\n  });\n\n  const changePasswordMutation = useMutation({\n    mutationFn: async (data: ChangePasswordData) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/change-password\", data);\n      return response.json();\n    },\n  });\n\n  const verifyPasswordMutation = useMutation({\n    mutationFn: async (password: string) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/verify-password\", { password });\n      return response.json();\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    login: loginMutation.mutateAsync,\n    logout: logoutMutation.mutateAsync,\n    changePassword: changePasswordMutation.mutateAsync,\n    verifyPassword: verifyPasswordMutation.mutateAsync,\n    isLoginPending: loginMutation.isPending,\n    isLogoutPending: logoutMutation.isPending,\n    isChangePasswordPending: changePasswordMutation.isPending,\n    isVerifyPasswordPending: verifyPasswordMutation.isPending,\n  };\n}\n","size_bytes":1919},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import type { LoginData, ChangePasswordData } from \"@shared/schema\";\n\nexport interface AuthUser {\n  id: number;\n  username: string;\n}\n\nexport interface AuthResponse {\n  message: string;\n  user?: AuthUser;\n}\n\nexport interface PasswordVerificationResponse {\n  valid: boolean;\n}\n\nexport const AUTH_STORAGE_KEY = \"lab_auth_token\";\nexport const REMEMBER_ME_KEY = \"lab_remember_me\";\n\nexport function getStoredAuthPreference(): boolean {\n  if (typeof window === \"undefined\") return false;\n  return localStorage.getItem(REMEMBER_ME_KEY) === \"true\";\n}\n\nexport function setAuthPreference(rememberMe: boolean): void {\n  if (typeof window === \"undefined\") return;\n  if (rememberMe) {\n    localStorage.setItem(REMEMBER_ME_KEY, \"true\");\n  } else {\n    localStorage.removeItem(REMEMBER_ME_KEY);\n  }\n}\n\nexport function clearAuthData(): void {\n  if (typeof window === \"undefined\") return;\n  localStorage.removeItem(REMEMBER_ME_KEY);\n  sessionStorage.clear();\n}\n\nexport function validateLoginData(data: Partial<LoginData>): string[] {\n  const errors: string[] = [];\n  \n  if (!data.username?.trim()) {\n    errors.push(\"Username is required\");\n  }\n  \n  if (!data.password?.trim()) {\n    errors.push(\"Password is required\");\n  }\n  \n  return errors;\n}\n\nexport function validatePasswordData(data: Partial<ChangePasswordData>): string[] {\n  const errors: string[] = [];\n  \n  if (!data.currentPassword?.trim()) {\n    errors.push(\"Current password is required\");\n  }\n  \n  if (!data.newPassword?.trim()) {\n    errors.push(\"New password is required\");\n  } else if (data.newPassword.length < 8) {\n    errors.push(\"New password must be at least 8 characters long\");\n  }\n  \n  if (!data.confirmPassword?.trim()) {\n    errors.push(\"Please confirm your new password\");\n  } else if (data.newPassword !== data.confirmPassword) {\n    errors.push(\"Passwords don't match\");\n  }\n  \n  return errors;\n}\n\nexport function getPasswordStrength(password: string): {\n  score: number;\n  feedback: string[];\n} {\n  const feedback: string[] = [];\n  let score = 0;\n  \n  if (password.length >= 8) {\n    score += 1;\n  } else {\n    feedback.push(\"Use at least 8 characters\");\n  }\n  \n  if (/[a-z]/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push(\"Include lowercase letters\");\n  }\n  \n  if (/[A-Z]/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push(\"Include uppercase letters\");\n  }\n  \n  if (/\\d/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push(\"Include numbers\");\n  }\n  \n  if (/[^a-zA-Z0-9]/.test(password)) {\n    score += 1;\n  } else {\n    feedback.push(\"Include special characters\");\n  }\n  \n  return { score, feedback };\n}\n","size_bytes":2610},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { \n  CheckCircle, \n  Users, \n  Clock, \n  AlertTriangle,\n  Droplets,\n  Heart,\n  Zap,\n  Activity,\n  Pill,\n  Brain,\n  Eye,\n  Thermometer,\n  FlaskConical\n} from \"lucide-react\";\n\ninterface DashboardStats {\n  todayTests: number;\n  totalPatients: number;\n  pendingReports: number;\n  criticalResults: number;\n}\n\nconst testTypes = [\n  { \n    name: \"CBC Test\", \n    href: \"/tests/cbc\", \n    icon: Droplets, \n    description: \"Complete Blood Count analysis\",\n    color: \"bg-red-100 text-red-600\"\n  },\n  { \n    name: \"LFT Test\", \n    href: \"/tests/lft\", \n    icon: Heart, \n    description: \"Liver Function Test\",\n    color: \"bg-yellow-100 text-yellow-600\"\n  },\n  { \n    name: \"RFT Test\", \n    href: \"/tests/rft\", \n    icon: FlaskConical, \n    description: \"Renal Function Test\",\n    color: \"bg-blue-100 text-blue-600\"\n  },\n  { \n    name: \"Lipid Profile\", \n    href: \"/tests/lipid\", \n    icon: Activity, \n    description: \"Cholesterol and lipid analysis\",\n    color: \"bg-green-100 text-green-600\"\n  },\n  { \n    name: \"Blood Sugar\", \n    href: \"/tests/sugar\", \n    icon: Pill, \n    description: \"Glucose level testing\",\n    color: \"bg-purple-100 text-purple-600\"\n  },\n  { \n    name: \"Thyroid Function\", \n    href: \"/tests/thyroid\", \n    icon: Brain, \n    description: \"TSH, T3, T4 analysis\",\n    color: \"bg-indigo-100 text-indigo-600\"\n  },\n];\n\nexport default function Dashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"animate-pulse space-y-8\">\n          <div className=\"h-8 bg-slate-200 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-slate-200 rounded-xl\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-8\">\n      {/* Welcome Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Welcome back, Admin</h1>\n        <p className=\"text-slate-600\">Here's what's happening in your lab today.</p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card className=\"bg-white rounded-xl shadow-sm border border-slate-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Today's Tests</p>\n                <p className=\"text-2xl font-bold text-slate-800\">{stats?.todayTests || 0}</p>\n              </div>\n              <div className=\"h-12 w-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white rounded-xl shadow-sm border border-slate-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Total Patients</p>\n                <p className=\"text-2xl font-bold text-slate-800\">{stats?.totalPatients || 0}</p>\n              </div>\n              <div className=\"h-12 w-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                <Users className=\"h-6 w-6 text-blue-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white rounded-xl shadow-sm border border-slate-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Pending Reports</p>\n                <p className=\"text-2xl font-bold text-slate-800\">{stats?.pendingReports || 0}</p>\n              </div>\n              <div className=\"h-12 w-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                <Clock className=\"h-6 w-6 text-yellow-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-white rounded-xl shadow-sm border border-slate-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">Critical Results</p>\n                <p className=\"text-2xl font-bold text-slate-800\">{stats?.criticalResults || 0}</p>\n              </div>\n              <div className=\"h-12 w-12 bg-red-100 rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Test Type Navigation */}\n      <div className=\"mb-8\">\n        <h2 className=\"text-xl font-semibold text-slate-800 mb-4\">Test Management</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {testTypes.map((test) => (\n            <Link key={test.name} href={test.href}>\n              <Card className=\"bg-white border border-slate-200 hover:border-[var(--medical-primary)] hover:shadow-md transition-all cursor-pointer\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center mb-3\">\n                    <div className={`h-10 w-10 ${test.color} rounded-lg flex items-center justify-center`}>\n                      <test.icon className=\"h-6 w-6\" />\n                    </div>\n                    <h3 className=\"ml-3 font-semibold text-slate-800\">{test.name}</h3>\n                  </div>\n                  <p className=\"text-sm text-slate-600\">{test.description}</p>\n                </CardContent>\n              </Card>\n            </Link>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6171},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertCircle, Eye, EyeOff, TestTube2, ShieldCheck } from \"lucide-react\";\nimport ChangePasswordModal from \"@/components/auth/change-password-modal\";\n\nexport default function Login() {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    rememberMe: false,\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [showChangePassword, setShowChangePassword] = useState(false);\n\n  const { login, isLoginPending } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    try {\n      await login(formData);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to Laboratory Management System\",\n      });\n    } catch (error: any) {\n      setError(error.message || \"Login failed\");\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value,\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-slate-50 to-cyan-50\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <Card className=\"bg-white rounded-2xl shadow-xl border border-slate-200\">\n          <CardContent className=\"pt-8 p-8\">\n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <div className=\"mx-auto h-16 w-16 medical-gradient rounded-full flex items-center justify-center mb-4\">\n                <TestTube2 className=\"h-8 w-8 text-white\" />\n              </div>\n              <h2 className=\"text-3xl font-bold text-slate-800\">Laboratory Management</h2>\n              <p className=\"text-slate-600 mt-2\">Secure Admin Access</p>\n            </div>\n\n            {/* Login Form */}\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"username\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Username\n                </Label>\n                <Input\n                  type=\"text\"\n                  id=\"username\"\n                  name=\"username\"\n                  required\n                  value={formData.username}\n                  onChange={handleInputChange}\n                  className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-[var(--medical-primary)] focus:border-[var(--medical-primary)] transition-colors\"\n                  placeholder=\"Enter your username\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"password\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n                  Password\n                </Label>\n                <div className=\"relative\">\n                  <Input\n                    type={showPassword ? \"text\" : \"password\"}\n                    id=\"password\"\n                    name=\"password\"\n                    required\n                    value={formData.password}\n                    onChange={handleInputChange}\n                    className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-[var(--medical-primary)] focus:border-[var(--medical-primary)] transition-colors pr-12\"\n                    placeholder=\"Enter your password\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-5 w-5 text-slate-400 hover:text-slate-600\" />\n                    ) : (\n                      <Eye className=\"h-5 w-5 text-slate-400 hover:text-slate-600\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"rememberMe\"\n                    name=\"rememberMe\"\n                    checked={formData.rememberMe}\n                    onCheckedChange={(checked) => \n                      setFormData(prev => ({ ...prev, rememberMe: !!checked }))\n                    }\n                  />\n                  <Label htmlFor=\"rememberMe\" className=\"text-sm text-slate-600\">\n                    Remember me\n                  </Label>\n                </div>\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"text-sm text-[var(--medical-primary)] hover:text-[var(--medical-primary-dark)] p-0\"\n                  onClick={() => setShowChangePassword(true)}\n                >\n                  Change Password\n                </Button>\n              </div>\n\n              <Button\n                type=\"submit\"\n                disabled={isLoginPending}\n                className=\"w-full medical-gradient text-white py-3 px-4 rounded-lg font-medium hover:opacity-90 transition-all duration-200 transform hover:scale-[1.02] focus:ring-4 focus:ring-[var(--medical-primary)]/25\"\n              >\n                {isLoginPending ? (\n                  <div className=\"flex items-center justify-center\">\n                    <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n                    Signing In...\n                  </div>\n                ) : (\n                  <div className=\"flex items-center justify-center\">\n                    <ShieldCheck className=\"h-5 w-5 mr-2\" />\n                    Sign In\n                  </div>\n                )}\n              </Button>\n            </form>\n\n            {/* Error Message */}\n            {error && (\n              <Alert className=\"mt-4 border-red-200 bg-red-50\">\n                <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                <AlertDescription className=\"text-red-600\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      <ChangePasswordModal\n        isOpen={showChangePassword}\n        onClose={() => setShowChangePassword(false)}\n      />\n    </div>\n  );\n}\n","size_bytes":6925},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/patients.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Eye } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertPatient } from \"@shared/schema\";\n\nexport default function Patients() {\n  const [formData, setFormData] = useState({\n    patientId: \"\",\n    name: \"\",\n    age: \"\",\n    gender: \"\",\n    phone: \"\",\n    address: \"\",\n  });\n  const [editingPatientId, setEditingPatientId] = useState<number | null>(null);\n\n  const { toast } = useToast();\n\n  // Get next patient ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/patients/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [], isLoading } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create patient mutation\n  const createPatientMutation = useMutation({\n    mutationFn: async (data: InsertPatient) => {\n      const response = await apiRequest(\"POST\", \"/api/patients\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        patientId: \"\",\n        name: \"\",\n        age: \"\",\n        gender: \"\",\n        phone: \"\",\n        address: \"\",\n      });\n      toast({\n        title: \"Patient registered successfully\",\n        description: \"New patient has been added to the system\",\n      });\n    },\n  });\n\n  // Update patient ID mutation\n  const updatePatientIdMutation = useMutation({\n    mutationFn: async ({ id, newPatientId }: { id: number; newPatientId: string }) => {\n      const response = await apiRequest(\"PUT\", `/api/patients/${id}/patient-id`, { newPatientId });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/patients\"] });\n      toast({\n        title: \"Patient ID updated successfully\",\n        description: \"Patient ID has been changed\",\n      });\n    },\n  });\n\n  // Set initial patient ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.patientId) {\n      setFormData(prev => ({ ...prev, patientId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.patientId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.patientId || !formData.name) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Patient ID and Name are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await createPatientMutation.mutateAsync({\n        patientId: formData.patientId,\n        name: formData.name,\n        age: formData.age ? parseInt(formData.age) : null,\n        gender: formData.gender || null,\n        phone: formData.phone || null,\n        address: formData.address || null,\n        createdBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to register patient\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleGenderChange = (value: string) => {\n    setFormData(prev => ({ ...prev, gender: value }));\n  };\n\n  const handleEditId = (patientId: number) => {\n    setEditingPatientId(patientId);\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    if (editingPatientId) {\n      try {\n        await updatePatientIdMutation.mutateAsync({\n          id: editingPatientId,\n          newPatientId: newId,\n        });\n        setEditingPatientId(null);\n      } catch (error: any) {\n        toast({\n          title: \"Update Failed\",\n          description: error.message || \"Failed to update patient ID\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Patient Management</h1>\n        <p className=\"text-slate-600\">Register and manage patient information</p>\n      </div>\n\n      {/* Patient Registration Form */}\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Patient Registration</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Patient ID with Edit Button */}\n            <div className=\"col-span-1\">\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient ID</Label>\n              <div className=\"flex\">\n                <Input\n                  type=\"text\"\n                  name=\"patientId\"\n                  value={formData.patientId}\n                  onChange={handleInputChange}\n                  readOnly\n                  className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                />\n                <Button\n                  type=\"button\"\n                  className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                  onClick={() => handleEditId(0)} // Use 0 for new patient ID editing\n                >\n                  <Edit3 className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Full Name</Label>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                value={formData.name}\n                onChange={handleInputChange}\n                required\n                placeholder=\"Enter patient name\"\n              />\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Age</Label>\n              <Input\n                type=\"number\"\n                name=\"age\"\n                value={formData.age}\n                onChange={handleInputChange}\n                placeholder=\"Enter age\"\n              />\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Gender</Label>\n              <Select value={formData.gender} onValueChange={handleGenderChange}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select gender\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"male\">Male</SelectItem>\n                  <SelectItem value=\"female\">Female</SelectItem>\n                  <SelectItem value=\"other\">Other</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Phone Number</Label>\n              <Input\n                type=\"tel\"\n                name=\"phone\"\n                value={formData.phone}\n                onChange={handleInputChange}\n                placeholder=\"Enter phone number\"\n              />\n            </div>\n\n            <div className=\"col-span-1 md:col-span-2 lg:col-span-3\">\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Address</Label>\n              <Textarea\n                name=\"address\"\n                value={formData.address}\n                onChange={handleInputChange}\n                rows={3}\n                placeholder=\"Enter complete address\"\n              />\n            </div>\n\n            <div className=\"col-span-1 md:col-span-2 lg:col-span-3\">\n              <Button\n                type=\"submit\"\n                disabled={createPatientMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createPatientMutation.isPending ? \"Registering...\" : \"Register Patient\"}\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Patient List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Registered Patients</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            </div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Patient ID</TableHead>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Age</TableHead>\n                    <TableHead>Gender</TableHead>\n                    <TableHead>Phone</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {patients.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-8 text-slate-500\">\n                        No patients registered yet\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    patients.map((patient) => (\n                      <TableRow key={patient.id}>\n                        <TableCell className=\"font-medium\">{patient.patientId}</TableCell>\n                        <TableCell>{patient.name}</TableCell>\n                        <TableCell>{patient.age || \"-\"}</TableCell>\n                        <TableCell className=\"capitalize\">{patient.gender || \"-\"}</TableCell>\n                        <TableCell>{patient.phone || \"-\"}</TableCell>\n                        <TableCell>\n                          <div className=\"flex space-x-2\">\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleEditId(patient.id)}\n                            >\n                              <Edit3 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingPatientId !== null}\n        onClose={() => setEditingPatientId(null)}\n        currentId={editingPatientId ? patients.find(p => p.id === editingPatientId)?.patientId || \"\" : formData.patientId}\n        idType=\"Patient\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":11657},"client/src/components/auth/change-password-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { KeyRound, AlertCircle } from \"lucide-react\";\n\ninterface ChangePasswordModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ChangePasswordModal({ isOpen, onClose }: ChangePasswordModalProps) {\n  const [formData, setFormData] = useState({\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  });\n  const [error, setError] = useState(\"\");\n\n  const { changePassword, isChangePasswordPending } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    if (formData.newPassword !== formData.confirmPassword) {\n      setError(\"Passwords don't match\");\n      return;\n    }\n\n    if (formData.newPassword.length < 8) {\n      setError(\"Password must be at least 8 characters\");\n      return;\n    }\n\n    try {\n      await changePassword({\n        currentPassword: formData.currentPassword,\n        newPassword: formData.newPassword,\n        confirmPassword: formData.confirmPassword,\n      });\n      \n      toast({\n        title: \"Password changed successfully\",\n        description: \"Your password has been updated\",\n      });\n      \n      setFormData({\n        currentPassword: \"\",\n        newPassword: \"\",\n        confirmPassword: \"\",\n      });\n      onClose();\n    } catch (error: any) {\n      setError(error.message || \"Failed to change password\");\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value,\n    }));\n  };\n\n  const handleClose = () => {\n    setFormData({\n      currentPassword: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n    });\n    setError(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-12 w-12 bg-[var(--medical-primary)]/10 rounded-full flex items-center justify-center\">\n              <KeyRound className=\"h-6 w-6 text-[var(--medical-primary)]\" />\n            </div>\n            <div>\n              <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n                Change Password\n              </DialogTitle>\n              <p className=\"text-sm text-slate-600\">Update your admin password</p>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"currentPassword\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Current Password\n            </Label>\n            <Input\n              type=\"password\"\n              id=\"currentPassword\"\n              name=\"currentPassword\"\n              required\n              value={formData.currentPassword}\n              onChange={handleInputChange}\n              placeholder=\"Enter current password\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"newPassword\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              New Password\n            </Label>\n            <Input\n              type=\"password\"\n              id=\"newPassword\"\n              name=\"newPassword\"\n              required\n              value={formData.newPassword}\n              onChange={handleInputChange}\n              placeholder=\"Enter new password\"\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n              Confirm New Password\n            </Label>\n            <Input\n              type=\"password\"\n              id=\"confirmPassword\"\n              name=\"confirmPassword\"\n              required\n              value={formData.confirmPassword}\n              onChange={handleInputChange}\n              placeholder=\"Confirm new password\"\n            />\n          </div>\n\n          {error && (\n            <Alert className=\"border-red-200 bg-red-50\">\n              <AlertCircle className=\"h-4 w-4 text-red-500\" />\n              <AlertDescription className=\"text-red-600\">\n                {error}\n              </AlertDescription>\n            </Alert>\n          )}\n\n          <div className=\"flex space-x-3 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={handleClose}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={isChangePasswordPending}\n              className=\"flex-1 medical-gradient text-white\"\n            >\n              {isChangePasswordPending ? \"Updating...\" : \"Update Password\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5293},"client/src/components/auth/login-form.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AlertCircle, Eye, EyeOff, ShieldCheck } from \"lucide-react\";\n\ninterface LoginFormProps {\n  onChangePassword: () => void;\n}\n\nexport default function LoginForm({ onChangePassword }: LoginFormProps) {\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    rememberMe: false,\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  const [error, setError] = useState(\"\");\n\n  const { login, isLoginPending } = useAuth();\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    try {\n      await login(formData);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to Laboratory Management System\",\n      });\n    } catch (error: any) {\n      setError(error.message || \"Login failed\");\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value, type, checked } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: type === \"checkbox\" ? checked : value,\n    }));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      <div>\n        <Label htmlFor=\"username\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n          Username\n        </Label>\n        <Input\n          type=\"text\"\n          id=\"username\"\n          name=\"username\"\n          required\n          value={formData.username}\n          onChange={handleInputChange}\n          className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-[var(--medical-primary)] focus:border-[var(--medical-primary)] transition-colors\"\n          placeholder=\"Enter your username\"\n        />\n      </div>\n\n      <div>\n        <Label htmlFor=\"password\" className=\"block text-sm font-medium text-slate-700 mb-2\">\n          Password\n        </Label>\n        <div className=\"relative\">\n          <Input\n            type={showPassword ? \"text\" : \"password\"}\n            id=\"password\"\n            name=\"password\"\n            required\n            value={formData.password}\n            onChange={handleInputChange}\n            className=\"w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-[var(--medical-primary)] focus:border-[var(--medical-primary)] transition-colors pr-12\"\n            placeholder=\"Enter your password\"\n          />\n          <Button\n            type=\"button\"\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute inset-y-0 right-0 pr-3 flex items-center\"\n            onClick={() => setShowPassword(!showPassword)}\n          >\n            {showPassword ? (\n              <EyeOff className=\"h-5 w-5 text-slate-400 hover:text-slate-600\" />\n            ) : (\n              <Eye className=\"h-5 w-5 text-slate-400 hover:text-slate-600\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"rememberMe\"\n            name=\"rememberMe\"\n            checked={formData.rememberMe}\n            onCheckedChange={(checked) => \n              setFormData(prev => ({ ...prev, rememberMe: !!checked }))\n            }\n          />\n          <Label htmlFor=\"rememberMe\" className=\"text-sm text-slate-600\">\n            Remember me\n          </Label>\n        </div>\n        <Button\n          type=\"button\"\n          variant=\"link\"\n          className=\"text-sm text-[var(--medical-primary)] hover:text-[var(--medical-primary-dark)] p-0\"\n          onClick={onChangePassword}\n        >\n          Change Password\n        </Button>\n      </div>\n\n      <Button\n        type=\"submit\"\n        disabled={isLoginPending}\n        className=\"w-full medical-gradient text-white py-3 px-4 rounded-lg font-medium hover:opacity-90 transition-all duration-200 transform hover:scale-[1.02] focus:ring-4 focus:ring-[var(--medical-primary)]/25\"\n      >\n        {isLoginPending ? (\n          <div className=\"flex items-center justify-center\">\n            <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2\"></div>\n            Signing In...\n          </div>\n        ) : (\n          <div className=\"flex items-center justify-center\">\n            <ShieldCheck className=\"h-5 w-5 mr-2\" />\n            Sign In\n          </div>\n        )}\n      </Button>\n\n      {error && (\n        <Alert className=\"border-red-200 bg-red-50\">\n          <AlertCircle className=\"h-4 w-4 text-red-500\" />\n          <AlertDescription className=\"text-red-600\">\n            {error}\n          </AlertDescription>\n        </Alert>\n      )}\n    </form>\n  );\n}\n","size_bytes":5040},"client/src/components/dashboard/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  CheckCircle, \n  Users, \n  Clock, \n  AlertTriangle\n} from \"lucide-react\";\n\ninterface DashboardStats {\n  todayTests: number;\n  totalPatients: number;\n  pendingReports: number;\n  criticalResults: number;\n}\n\ninterface StatsCardsProps {\n  stats?: DashboardStats;\n  isLoading: boolean;\n}\n\nexport default function StatsCards({ stats, isLoading }: StatsCardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[...Array(4)].map((_, i) => (\n          <div key={i} className=\"h-32 bg-slate-200 rounded-xl animate-pulse\"></div>\n        ))}\n      </div>\n    );\n  }\n\n  const statsData = [\n    {\n      title: \"Today's Tests\",\n      value: stats?.todayTests || 0,\n      icon: CheckCircle,\n      color: \"bg-green-100 text-green-600\",\n    },\n    {\n      title: \"Total Patients\",\n      value: stats?.totalPatients || 0,\n      icon: Users,\n      color: \"bg-blue-100 text-blue-600\",\n    },\n    {\n      title: \"Pending Reports\",\n      value: stats?.pendingReports || 0,\n      icon: Clock,\n      color: \"bg-yellow-100 text-yellow-600\",\n    },\n    {\n      title: \"Critical Results\",\n      value: stats?.criticalResults || 0,\n      icon: AlertTriangle,\n      color: \"bg-red-100 text-red-600\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statsData.map((stat) => (\n        <Card key={stat.title} className=\"bg-white rounded-xl shadow-sm border border-slate-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-slate-600\">{stat.title}</p>\n                <p className=\"text-2xl font-bold text-slate-800\">{stat.value}</p>\n              </div>\n              <div className={`h-12 w-12 ${stat.color} rounded-lg flex items-center justify-center`}>\n                <stat.icon className=\"h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2115},"client/src/components/dashboard/test-navigation.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { \n  Droplets,\n  Heart,\n  Zap,\n  Activity,\n  Pill,\n  Brain,\n  Eye,\n  Thermometer,\n  FlaskConical\n} from \"lucide-react\";\n\nconst testTypes = [\n  { \n    name: \"CBC Test\", \n    href: \"/tests/cbc\", \n    icon: Droplets, \n    description: \"Complete Blood Count analysis\",\n    color: \"bg-red-100 text-red-600\"\n  },\n  { \n    name: \"LFT Test\", \n    href: \"/tests/lft\", \n    icon: Heart, \n    description: \"Liver Function Test\",\n    color: \"bg-yellow-100 text-yellow-600\"\n  },\n  { \n    name: \"RFT Test\", \n    href: \"/tests/rft\", \n    icon: FlaskConical, \n    description: \"Renal Function Test\",\n    color: \"bg-blue-100 text-blue-600\"\n  },\n  { \n    name: \"Lipid Profile\", \n    href: \"/tests/lipid\", \n    icon: Activity, \n    description: \"Cholesterol and lipid analysis\",\n    color: \"bg-green-100 text-green-600\"\n  },\n  { \n    name: \"Blood Sugar\", \n    href: \"/tests/sugar\", \n    icon: Pill, \n    description: \"Glucose level testing\",\n    color: \"bg-purple-100 text-purple-600\"\n  },\n  { \n    name: \"Thyroid Function\", \n    href: \"/tests/thyroid\", \n    icon: Brain, \n    description: \"TSH, T3, T4 analysis\",\n    color: \"bg-indigo-100 text-indigo-600\"\n  },\n  { \n    name: \"Urine Analysis\", \n    href: \"/tests/urine\", \n    icon: Eye, \n    description: \"Complete urinalysis\",\n    color: \"bg-cyan-100 text-cyan-600\"\n  },\n  { \n    name: \"Cardiac Markers\", \n    href: \"/tests/cardiac\", \n    icon: Heart, \n    description: \"Heart function analysis\",\n    color: \"bg-rose-100 text-rose-600\"\n  },\n  { \n    name: \"Electrolytes\", \n    href: \"/tests/electrolytes\", \n    icon: Zap, \n    description: \"Ion balance analysis\",\n    color: \"bg-orange-100 text-orange-600\"\n  },\n];\n\nexport default function TestNavigation() {\n  return (\n    <div className=\"mb-8\">\n      <h2 className=\"text-xl font-semibold text-slate-800 mb-4\">Test Management</h2>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {testTypes.map((test) => (\n          <Link key={test.name} href={test.href}>\n            <Card className=\"bg-white border border-slate-200 hover:border-[var(--medical-primary)] hover:shadow-md transition-all cursor-pointer\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center mb-3\">\n                  <div className={`h-10 w-10 ${test.color} rounded-lg flex items-center justify-center`}>\n                    <test.icon className=\"h-6 w-6\" />\n                  </div>\n                  <h3 className=\"ml-3 font-semibold text-slate-800\">{test.name}</h3>\n                </div>\n                <p className=\"text-sm text-slate-600\">{test.description}</p>\n              </CardContent>\n            </Card>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2802},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  TestTube2, \n  LayoutDashboard, \n  Users, \n  FileText,\n  LogOut,\n  Droplets,\n  Heart,\n  Zap,\n  Activity,\n  Pill,\n  Brain,\n  Eye,\n  Thermometer,\n  FlaskConical\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Patients\", href: \"/patients\", icon: Users },\n];\n\nconst testNavigation = [\n  { name: \"CBC Test\", href: \"/tests/cbc\", icon: Droplets },\n  { name: \"LFT Test\", href: \"/tests/lft\", icon: Heart },\n  { name: \"RFT Test\", href: \"/tests/rft\", icon: FlaskConical },\n  { name: \"Lipid Profile\", href: \"/tests/lipid\", icon: Activity },\n  { name: \"Blood Sugar\", href: \"/tests/sugar\", icon: Pill },\n  { name: \"Thyroid Function\", href: \"/tests/thyroid\", icon: Brain },\n  { name: \"Urine Analysis\", href: \"/tests/urine\", icon: Eye },\n  { name: \"Cardiac Markers\", href: \"/tests/cardiac\", icon: Heart },\n  { name: \"Electrolytes\", href: \"/tests/electrolytes\", icon: Zap },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n  const { user, logout } = useAuth();\n  const { toast } = useToast();\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"Logged out successfully\",\n        description: \"You have been signed out of the system\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Logout failed\",\n        description: \"Please try again\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-y-0 left-0 w-64 bg-white shadow-lg border-r border-slate-200 z-50\">\n      <div className=\"flex flex-col h-full\">\n        {/* Logo */}\n        <div className=\"flex items-center px-6 py-4 border-b border-slate-200\">\n          <div className=\"h-10 w-10 medical-gradient rounded-lg flex items-center justify-center\">\n            <TestTube2 className=\"h-6 w-6 text-white\" />\n          </div>\n          <span className=\"ml-3 font-semibold text-slate-800\">Lab Management</span>\n        </div>\n\n        {/* Navigation Menu */}\n        <nav className=\"flex-1 px-4 py-4 space-y-2 overflow-y-auto\">\n          {/* Main Navigation */}\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            return (\n              <Link key={item.name} href={item.href}>\n                <Button\n                  variant={isActive ? \"default\" : \"ghost\"}\n                  className={`w-full justify-start ${\n                    isActive \n                      ? \"bg-[var(--medical-primary)] text-white hover:bg-[var(--medical-primary-dark)]\" \n                      : \"text-slate-600 hover:bg-slate-100 hover:text-slate-800\"\n                  }`}\n                >\n                  <item.icon className=\"h-5 w-5 mr-3\" />\n                  {item.name}\n                </Button>\n              </Link>\n            );\n          })}\n\n          {/* Test Management Section */}\n          <div className=\"pt-6\">\n            <h3 className=\"px-3 text-xs font-semibold text-slate-500 uppercase tracking-wider mb-3\">\n              Test Management\n            </h3>\n            {testNavigation.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <Button\n                    variant={isActive ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    className={`w-full justify-start text-sm ${\n                      isActive \n                        ? \"bg-[var(--medical-primary)] text-white hover:bg-[var(--medical-primary-dark)]\" \n                        : \"text-slate-600 hover:bg-slate-100 hover:text-slate-800\"\n                    }`}\n                  >\n                    <item.icon className=\"h-4 w-4 mr-3\" />\n                    {item.name}\n                  </Button>\n                </Link>\n              );\n            })}\n          </div>\n        </nav>\n\n        {/* User Info */}\n        <div className=\"px-4 py-4 border-t border-slate-200\">\n          <div className=\"flex items-center mb-3\">\n            <div className=\"h-8 w-8 bg-[var(--medical-primary)] rounded-full flex items-center justify-center\">\n              <span className=\"text-white text-sm font-medium\">\n                {user?.username?.charAt(0).toUpperCase() || 'A'}\n              </span>\n            </div>\n            <div className=\"ml-3 flex-1\">\n              <p className=\"text-sm font-medium text-slate-800\">{user?.username || 'Admin'}</p>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"w-full justify-start text-slate-600 hover:text-slate-800\"\n          >\n            <LogOut className=\"h-4 w-4 mr-2\" />\n            Sign out\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5000},"client/src/components/modals/edit-id-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ShieldAlert, AlertCircle } from \"lucide-react\";\n\ninterface EditIdModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  currentId: string;\n  idType: \"Patient\" | \"Test\";\n  onUpdate: (newId: string) => void;\n}\n\nexport default function EditIdModal({ isOpen, onClose, currentId, idType, onUpdate }: EditIdModalProps) {\n  const [password, setPassword] = useState(\"\");\n  const [newId, setNewId] = useState(\"\");\n  const [step, setStep] = useState<\"verify\" | \"edit\">(\"verify\");\n  const [error, setError] = useState(\"\");\n\n  const { verifyPassword, isVerifyPasswordPending } = useAuth();\n  const { toast } = useToast();\n\n  const handlePasswordVerify = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError(\"\");\n\n    try {\n      const result = await verifyPassword(password);\n      if (result.valid) {\n        setStep(\"edit\");\n        setNewId(currentId);\n      } else {\n        setError(\"Invalid password. Please try again.\");\n      }\n    } catch (error: any) {\n      setError(error.message || \"Failed to verify password\");\n    }\n  };\n\n  const handleIdUpdate = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!newId.trim()) {\n      setError(\"ID cannot be empty\");\n      return;\n    }\n\n    if (newId === currentId) {\n      setError(\"New ID must be different from current ID\");\n      return;\n    }\n\n    onUpdate(newId);\n    handleClose();\n  };\n\n  const handleClose = () => {\n    setPassword(\"\");\n    setNewId(\"\");\n    setStep(\"verify\");\n    setError(\"\");\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-12 w-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n              <ShieldAlert className=\"h-6 w-6 text-yellow-600\" />\n            </div>\n            <div>\n              <DialogTitle className=\"text-lg font-semibold text-slate-800\">\n                {step === \"verify\" ? \"Enter Admin Password\" : `Edit ${idType} ID`}\n              </DialogTitle>\n              <p className=\"text-sm text-slate-600\">\n                {step === \"verify\" \n                  ? `Password required to edit ${idType} ID` \n                  : `Change ${idType} ID from ${currentId}`\n                }\n              </p>\n            </div>\n          </div>\n        </DialogHeader>\n\n        {step === \"verify\" ? (\n          <form onSubmit={handlePasswordVerify}>\n            <div className=\"mb-6\">\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                Admin Password\n              </Label>\n              <Input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n                placeholder=\"Enter your password\"\n              />\n            </div>\n\n            {error && (\n              <Alert className=\"mb-4 border-red-200 bg-red-50\">\n                <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                <AlertDescription className=\"text-red-600\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={isVerifyPasswordPending}\n                className=\"flex-1 bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {isVerifyPasswordPending ? \"Verifying...\" : \"Verify\"}\n              </Button>\n            </div>\n          </form>\n        ) : (\n          <form onSubmit={handleIdUpdate}>\n            <div className=\"mb-6\">\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                New {idType} ID\n              </Label>\n              <Input\n                type=\"text\"\n                value={newId}\n                onChange={(e) => setNewId(e.target.value)}\n                required\n                placeholder={`Enter new ${idType.toLowerCase()} ID`}\n              />\n            </div>\n\n            {error && (\n              <Alert className=\"mb-4 border-red-200 bg-red-50\">\n                <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                <AlertDescription className=\"text-red-600\">\n                  {error}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"flex-1 bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                Update ID\n              </Button>\n            </div>\n          </form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5672},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/tests/cardiac.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst cardiacParameters = [\n  { name: \"troponinI\", label: \"Troponin I\", unit: \"ng/mL\", normalRange: \"<0.04\", step: \"0.001\" },\n  { name: \"troponinT\", label: \"Troponin T\", unit: \"ng/mL\", normalRange: \"<0.01\", step: \"0.001\" },\n  { name: \"ckMb\", label: \"CK-MB\", unit: \"ng/mL\", normalRange: \"<6.3\", step: \"0.1\" },\n  { name: \"myoglobin\", label: \"Myoglobin\", unit: \"ng/mL\", normalRange: \"25-72\", step: \"1\" },\n  { name: \"ldh\", label: \"LDH\", unit: \"U/L\", normalRange: \"140-280\", step: \"1\" },\n  { name: \"bnp\", label: \"BNP\", unit: \"pg/mL\", normalRange: \"<100\", step: \"1\" },\n  { name: \"ntProBnp\", label: \"NT-proBNP\", unit: \"pg/mL\", normalRange: \"<125\", step: \"1\" },\n  { name: \"dDimer\", label: \"D-Dimer\", unit: \"mg/L\", normalRange: \"<0.50\", step: \"0.01\" },\n];\n\nexport default function CardiacTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"Cardiac markers test saved successfully\",\n        description: \"Cardiac test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    cardiacParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        if (param.normalRange.includes('<')) {\n          // Upper limit only\n          const threshold = parseFloat(param.normalRange.replace('<', ''));\n          flags[param.name] = value <= threshold ? \"NORMAL\" : \"HIGH\";\n        } else if (param.normalRange.includes('>')) {\n          // Lower limit only\n          const threshold = parseFloat(param.normalRange.replace('>', ''));\n          flags[param.name] = value >= threshold ? \"NORMAL\" : \"LOW\";\n        } else {\n          // Range-based\n          const [min, max] = param.normalRange.split('-').map(parseFloat);\n          if (value < min) {\n            flags[param.name] = \"LOW\";\n          } else if (value > max) {\n            flags[param.name] = \"HIGH\";\n          } else {\n            flags[param.name] = \"NORMAL\";\n          }\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    cardiacParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"Cardiac Markers\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Cardiac Markers - Heart Function Analysis</h1>\n        <p className=\"text-slate-600\">Comprehensive cardiac enzyme and biomarker testing</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Cardiac Markers Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Cardiac Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {cardiacParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":10580},"client/src/pages/tests/cbc.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst cbcParameters = [\n  { name: \"wbc\", label: \"WBC Count\", unit: \"×10³/μL\", normalRange: \"4.5-11.0\", step: \"0.01\" },\n  { name: \"rbc\", label: \"RBC Count\", unit: \"×10⁶/μL\", normalRange: \"4.2-5.4\", step: \"0.01\" },\n  { name: \"hemoglobin\", label: \"Hemoglobin\", unit: \"g/dL\", normalRange: \"13.5-17.5\", step: \"0.1\" },\n  { name: \"hematocrit\", label: \"Hematocrit\", unit: \"%\", normalRange: \"38.8-50.0\", step: \"0.1\" },\n  { name: \"platelets\", label: \"Platelets\", unit: \"×10³/μL\", normalRange: \"150-450\", step: \"1\" },\n  { name: \"mcv\", label: \"MCV\", unit: \"fL\", normalRange: \"82-98\", step: \"0.1\" },\n];\n\nexport default function CBCTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"CBC test saved successfully\",\n        description: \"Test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    cbcParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        const [min, max] = param.normalRange.split('-').map(parseFloat);\n        if (value < min) {\n          flags[param.name] = \"LOW\";\n        } else if (value > max) {\n          flags[param.name] = \"HIGH\";\n        } else {\n          flags[param.name] = \"NORMAL\";\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    cbcParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"CBC\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">CBC Test - Complete Blood Count</h1>\n        <p className=\"text-slate-600\">Comprehensive blood analysis and cell count</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New CBC Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* CBC Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {cbcParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":9832},"client/src/pages/tests/electrolytes.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst electrolyteParameters = [\n  { name: \"sodium\", label: \"Sodium (Na+)\", unit: \"mmol/L\", normalRange: \"136-145\", step: \"1\" },\n  { name: \"potassium\", label: \"Potassium (K+)\", unit: \"mmol/L\", normalRange: \"3.5-5.1\", step: \"0.1\" },\n  { name: \"chloride\", label: \"Chloride (Cl-)\", unit: \"mmol/L\", normalRange: \"98-107\", step: \"1\" },\n  { name: \"bicarbonate\", label: \"Bicarbonate (HCO3-)\", unit: \"mmol/L\", normalRange: \"22-28\", step: \"1\" },\n  { name: \"calcium\", label: \"Calcium (Ca2+)\", unit: \"mg/dL\", normalRange: \"8.5-10.5\", step: \"0.1\" },\n  { name: \"magnesium\", label: \"Magnesium (Mg2+)\", unit: \"mg/dL\", normalRange: \"1.7-2.2\", step: \"0.1\" },\n  { name: \"phosphorus\", label: \"Phosphorus (PO4-)\", unit: \"mg/dL\", normalRange: \"2.5-4.5\", step: \"0.1\" },\n  { name: \"anionGap\", label: \"Anion Gap\", unit: \"mmol/L\", normalRange: \"8-16\", step: \"1\" },\n];\n\nexport default function ElectrolytesTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"Electrolytes test saved successfully\",\n        description: \"Electrolyte panel results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    electrolyteParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        const [min, max] = param.normalRange.split('-').map(parseFloat);\n        if (value < min) {\n          flags[param.name] = \"LOW\";\n        } else if (value > max) {\n          flags[param.name] = \"HIGH\";\n        } else {\n          flags[param.name] = \"NORMAL\";\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    electrolyteParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"Electrolytes\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Electrolytes Panel - Ion Balance Analysis</h1>\n        <p className=\"text-slate-600\">Comprehensive electrolyte and mineral analysis</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Electrolytes Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Electrolyte Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {electrolyteParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":10168},"client/src/pages/tests/lft.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst lftParameters = [\n  { name: \"alt\", label: \"ALT (SGPT)\", unit: \"U/L\", normalRange: \"7-56\", step: \"1\" },\n  { name: \"ast\", label: \"AST (SGOT)\", unit: \"U/L\", normalRange: \"10-40\", step: \"1\" },\n  { name: \"alp\", label: \"Alkaline Phosphatase\", unit: \"U/L\", normalRange: \"44-147\", step: \"1\" },\n  { name: \"totalBilirubin\", label: \"Total Bilirubin\", unit: \"mg/dL\", normalRange: \"0.3-1.2\", step: \"0.1\" },\n  { name: \"directBilirubin\", label: \"Direct Bilirubin\", unit: \"mg/dL\", normalRange: \"0.0-0.3\", step: \"0.1\" },\n  { name: \"totalProtein\", label: \"Total Protein\", unit: \"g/dL\", normalRange: \"6.3-8.2\", step: \"0.1\" },\n  { name: \"albumin\", label: \"Albumin\", unit: \"g/dL\", normalRange: \"3.5-5.0\", step: \"0.1\" },\n  { name: \"globulin\", label: \"Globulin\", unit: \"g/dL\", normalRange: \"2.3-3.4\", step: \"0.1\" },\n];\n\nexport default function LFTTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"LFT test saved successfully\",\n        description: \"Liver function test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    lftParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        const [min, max] = param.normalRange.split('-').map(parseFloat);\n        if (value < min) {\n          flags[param.name] = \"LOW\";\n        } else if (value > max) {\n          flags[param.name] = \"HIGH\";\n        } else {\n          flags[param.name] = \"NORMAL\";\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    lftParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"LFT\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">LFT Test - Liver Function Test</h1>\n        <p className=\"text-slate-600\">Comprehensive liver function analysis</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New LFT Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* LFT Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {lftParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":10042},"client/src/pages/tests/lipid.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst lipidParameters = [\n  { name: \"totalCholesterol\", label: \"Total Cholesterol\", unit: \"mg/dL\", normalRange: \"<200\", step: \"1\" },\n  { name: \"ldl\", label: \"LDL Cholesterol\", unit: \"mg/dL\", normalRange: \"<100\", step: \"1\" },\n  { name: \"hdl\", label: \"HDL Cholesterol\", unit: \"mg/dL\", normalRange: \">40\", step: \"1\" },\n  { name: \"triglycerides\", label: \"Triglycerides\", unit: \"mg/dL\", normalRange: \"<150\", step: \"1\" },\n  { name: \"vldl\", label: \"VLDL Cholesterol\", unit: \"mg/dL\", normalRange: \"5-40\", step: \"1\" },\n  { name: \"nonHdl\", label: \"Non-HDL Cholesterol\", unit: \"mg/dL\", normalRange: \"<130\", step: \"1\" },\n];\n\nexport default function LipidTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"Lipid profile saved successfully\",\n        description: \"Lipid profile test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    lipidParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        // Special logic for different lipid parameters\n        if (param.name === \"totalCholesterol\" || param.name === \"ldl\" || param.name === \"triglycerides\" || param.name === \"nonHdl\") {\n          // Lower is better for these parameters\n          const threshold = parseFloat(param.normalRange.replace('<', ''));\n          flags[param.name] = value <= threshold ? \"NORMAL\" : \"HIGH\";\n        } else if (param.name === \"hdl\") {\n          // Higher is better for HDL\n          const threshold = parseFloat(param.normalRange.replace('>', ''));\n          flags[param.name] = value >= threshold ? \"NORMAL\" : \"LOW\";\n        } else if (param.name === \"vldl\") {\n          // Range-based\n          const [min, max] = param.normalRange.split('-').map(parseFloat);\n          if (value < min) {\n            flags[param.name] = \"LOW\";\n          } else if (value > max) {\n            flags[param.name] = \"HIGH\";\n          } else {\n            flags[param.name] = \"NORMAL\";\n          }\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    lipidParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"Lipid Profile\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Lipid Profile - Cholesterol Analysis</h1>\n        <p className=\"text-slate-600\">Comprehensive cholesterol and lipid analysis</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Lipid Profile Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Lipid Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {lipidParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":10606},"client/src/pages/tests/rft.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst rftParameters = [\n  { name: \"urea\", label: \"Urea\", unit: \"mg/dL\", normalRange: \"7-20\", step: \"0.1\" },\n  { name: \"creatinine\", label: \"Creatinine\", unit: \"mg/dL\", normalRange: \"0.7-1.3\", step: \"0.01\" },\n  { name: \"uricAcid\", label: \"Uric Acid\", unit: \"mg/dL\", normalRange: \"3.4-7.0\", step: \"0.1\" },\n  { name: \"sodium\", label: \"Sodium\", unit: \"mmol/L\", normalRange: \"136-145\", step: \"1\" },\n  { name: \"potassium\", label: \"Potassium\", unit: \"mmol/L\", normalRange: \"3.5-5.1\", step: \"0.1\" },\n  { name: \"chloride\", label: \"Chloride\", unit: \"mmol/L\", normalRange: \"98-107\", step: \"1\" },\n  { name: \"bun\", label: \"BUN\", unit: \"mg/dL\", normalRange: \"6-24\", step: \"1\" },\n  { name: \"egfr\", label: \"eGFR\", unit: \"mL/min/1.73m²\", normalRange: \">60\", step: \"1\" },\n];\n\nexport default function RFTTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"RFT test saved successfully\",\n        description: \"Renal function test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    rftParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        if (param.name === \"egfr\") {\n          // eGFR has different logic (>60 is normal)\n          flags[param.name] = value >= 60 ? \"NORMAL\" : \"LOW\";\n        } else {\n          const [min, max] = param.normalRange.split('-').map(parseFloat);\n          if (value < min) {\n            flags[param.name] = \"LOW\";\n          } else if (value > max) {\n            flags[param.name] = \"HIGH\";\n          } else {\n            flags[param.name] = \"NORMAL\";\n          }\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    rftParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"RFT\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">RFT Test - Renal Function Test</h1>\n        <p className=\"text-slate-600\">Comprehensive kidney function analysis</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New RFT Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* RFT Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {rftParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":10195},"client/src/pages/tests/sugar.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst sugarParameters = [\n  { name: \"fastingGlucose\", label: \"Fasting Glucose\", unit: \"mg/dL\", normalRange: \"70-100\", step: \"1\" },\n  { name: \"randomGlucose\", label: \"Random Glucose\", unit: \"mg/dL\", normalRange: \"70-140\", step: \"1\" },\n  { name: \"postPrandial\", label: \"Post Prandial (2hr)\", unit: \"mg/dL\", normalRange: \"<140\", step: \"1\" },\n  { name: \"hba1c\", label: \"HbA1c\", unit: \"%\", normalRange: \"4.0-5.6\", step: \"0.1\" },\n  { name: \"gtt1hr\", label: \"GTT 1 Hour\", unit: \"mg/dL\", normalRange: \"<180\", step: \"1\" },\n  { name: \"gtt2hr\", label: \"GTT 2 Hour\", unit: \"mg/dL\", normalRange: \"<140\", step: \"1\" },\n];\n\nexport default function SugarTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"Blood sugar test saved successfully\",\n        description: \"Glucose test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    sugarParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        if (param.name === \"postPrandial\" || param.name === \"gtt1hr\" || param.name === \"gtt2hr\") {\n          // These have upper limits only\n          const threshold = parseFloat(param.normalRange.replace('<', ''));\n          flags[param.name] = value <= threshold ? \"NORMAL\" : \"HIGH\";\n        } else {\n          // Range-based parameters\n          const [min, max] = param.normalRange.split('-').map(parseFloat);\n          if (value < min) {\n            flags[param.name] = \"LOW\";\n          } else if (value > max) {\n            flags[param.name] = \"HIGH\";\n          } else {\n            flags[param.name] = \"NORMAL\";\n          }\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    sugarParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"Blood Sugar\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Blood Sugar Test - Glucose Analysis</h1>\n        <p className=\"text-slate-600\">Comprehensive glucose level testing and diabetes screening</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Blood Sugar Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Sugar Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sugarParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":10266},"client/src/pages/tests/thyroid.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst thyroidParameters = [\n  { name: \"tsh\", label: \"TSH\", unit: \"mIU/L\", normalRange: \"0.27-4.20\", step: \"0.01\" },\n  { name: \"t3\", label: \"T3 (Triiodothyronine)\", unit: \"ng/dL\", normalRange: \"80-200\", step: \"1\" },\n  { name: \"t4\", label: \"T4 (Thyroxine)\", unit: \"μg/dL\", normalRange: \"5.1-14.1\", step: \"0.1\" },\n  { name: \"freeT3\", label: \"Free T3\", unit: \"pg/mL\", normalRange: \"2.0-4.4\", step: \"0.1\" },\n  { name: \"freeT4\", label: \"Free T4\", unit: \"ng/dL\", normalRange: \"0.93-1.70\", step: \"0.01\" },\n  { name: \"antiTPO\", label: \"Anti-TPO\", unit: \"IU/mL\", normalRange: \"<34\", step: \"1\" },\n  { name: \"antiTG\", label: \"Anti-Thyroglobulin\", unit: \"IU/mL\", normalRange: \"<115\", step: \"1\" },\n  { name: \"thyroglobulin\", label: \"Thyroglobulin\", unit: \"ng/mL\", normalRange: \"1.4-78.0\", step: \"0.1\" },\n];\n\nexport default function ThyroidTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"Thyroid function test saved successfully\",\n        description: \"Thyroid test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    thyroidParameters.forEach(param => {\n      const value = parseFloat(formData.results[param.name]);\n      if (!isNaN(value)) {\n        if (param.name === \"antiTPO\" || param.name === \"antiTG\") {\n          // These have upper limits only\n          const threshold = parseFloat(param.normalRange.replace('<', ''));\n          flags[param.name] = value <= threshold ? \"NORMAL\" : \"HIGH\";\n        } else {\n          // Range-based parameters\n          const [min, max] = param.normalRange.split('-').map(parseFloat);\n          if (value < min) {\n            flags[param.name] = \"LOW\";\n          } else if (value > max) {\n            flags[param.name] = \"HIGH\";\n          } else {\n            flags[param.name] = \"NORMAL\";\n          }\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    thyroidParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"Thyroid Function\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Thyroid Function Test - TSH, T3, T4 Analysis</h1>\n        <p className=\"text-slate-600\">Comprehensive thyroid hormone and antibody analysis</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Thyroid Function Test</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Thyroid Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {thyroidParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type=\"number\"\n                      step={param.step}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className=\"flex-1 rounded-r-none\"\n                      placeholder={param.normalRange}\n                    />\n                    <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                      {param.unit}\n                    </span>\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange} {param.unit}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":10448},"client/src/pages/tests/urine.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Edit3, Printer } from \"lucide-react\";\nimport EditIdModal from \"@/components/modals/edit-id-modal\";\nimport type { Patient, InsertTest } from \"@shared/schema\";\n\nconst urineParameters = [\n  { name: \"color\", label: \"Color\", unit: \"\", normalRange: \"Pale Yellow\", step: \"\", type: \"text\" },\n  { name: \"appearance\", label: \"Appearance\", unit: \"\", normalRange: \"Clear\", step: \"\", type: \"text\" },\n  { name: \"specificGravity\", label: \"Specific Gravity\", unit: \"\", normalRange: \"1.003-1.030\", step: \"0.001\", type: \"number\" },\n  { name: \"ph\", label: \"pH\", unit: \"\", normalRange: \"4.6-8.0\", step: \"0.1\", type: \"number\" },\n  { name: \"protein\", label: \"Protein\", unit: \"mg/dL\", normalRange: \"Negative\", step: \"1\", type: \"text\" },\n  { name: \"glucose\", label: \"Glucose\", unit: \"mg/dL\", normalRange: \"Negative\", step: \"1\", type: \"text\" },\n  { name: \"ketones\", label: \"Ketones\", unit: \"\", normalRange: \"Negative\", step: \"\", type: \"text\" },\n  { name: \"blood\", label: \"Blood\", unit: \"\", normalRange: \"Negative\", step: \"\", type: \"text\" },\n  { name: \"bilirubin\", label: \"Bilirubin\", unit: \"\", normalRange: \"Negative\", step: \"\", type: \"text\" },\n  { name: \"urobilinogen\", label: \"Urobilinogen\", unit: \"mg/dL\", normalRange: \"0.2-1.0\", step: \"0.1\", type: \"number\" },\n  { name: \"nitrites\", label: \"Nitrites\", unit: \"\", normalRange: \"Negative\", step: \"\", type: \"text\" },\n  { name: \"leukocytes\", label: \"Leukocytes\", unit: \"\", normalRange: \"Negative\", step: \"\", type: \"text\" },\n];\n\nexport default function UrineTest() {\n  const [formData, setFormData] = useState({\n    testId: \"\",\n    patientId: \"\",\n    results: {} as Record<string, string>,\n    comments: \"\",\n  });\n  const [editingTestId, setEditingTestId] = useState<boolean>(false);\n\n  const { toast } = useToast();\n\n  // Get next test ID\n  const { data: nextIdData } = useQuery<{ nextId: string }>({\n    queryKey: [\"/api/tests/next-id\"],\n  });\n\n  // Get all patients\n  const { data: patients = [] } = useQuery<Patient[]>({\n    queryKey: [\"/api/patients\"],\n  });\n\n  // Create test mutation\n  const createTestMutation = useMutation({\n    mutationFn: async (data: InsertTest) => {\n      const response = await apiRequest(\"POST\", \"/api/tests\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tests/next-id\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      setFormData({\n        testId: \"\",\n        patientId: \"\",\n        results: {},\n        comments: \"\",\n      });\n      toast({\n        title: \"Urine analysis saved successfully\",\n        description: \"Urine test results have been recorded\",\n      });\n    },\n  });\n\n  // Set initial test ID when component loads\n  React.useEffect(() => {\n    if (nextIdData?.nextId && !formData.testId) {\n      setFormData(prev => ({ ...prev, testId: nextIdData.nextId }));\n    }\n  }, [nextIdData, formData.testId]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.testId || !formData.patientId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Test ID and Patient are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Find patient by patientId\n    const patient = patients.find(p => p.patientId === formData.patientId);\n    if (!patient) {\n      toast({\n        title: \"Patient Not Found\",\n        description: \"Selected patient not found\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate flags based on results\n    const flags: Record<string, string> = {};\n    urineParameters.forEach(param => {\n      const value = formData.results[param.name];\n      if (value) {\n        if (param.type === \"number\") {\n          const numValue = parseFloat(value);\n          if (!isNaN(numValue)) {\n            const [min, max] = param.normalRange.split('-').map(parseFloat);\n            if (numValue < min) {\n              flags[param.name] = \"LOW\";\n            } else if (numValue > max) {\n              flags[param.name] = \"HIGH\";\n            } else {\n              flags[param.name] = \"NORMAL\";\n            }\n          }\n        } else {\n          // Text parameters - simple comparison\n          flags[param.name] = value.toLowerCase() === param.normalRange.toLowerCase() ? \"NORMAL\" : \"ABNORMAL\";\n        }\n      }\n    });\n\n    // Prepare normal ranges\n    const normalRanges: Record<string, string> = {};\n    urineParameters.forEach(param => {\n      normalRanges[param.name] = param.normalRange;\n    });\n\n    try {\n      await createTestMutation.mutateAsync({\n        testId: formData.testId,\n        patientId: patient.id,\n        testType: \"Urine Analysis\",\n        testResults: formData.results,\n        normalRanges,\n        flags,\n        status: \"completed\",\n        performedBy: undefined,\n        modifiedBy: undefined,\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Test Save Failed\",\n        description: error.message || \"Failed to save test results\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleResultChange = (paramName: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      results: { ...prev.results, [paramName]: value }\n    }));\n  };\n\n  const handleIdUpdate = async (newId: string) => {\n    setFormData(prev => ({ ...prev, testId: newId }));\n    setEditingTestId(false);\n  };\n\n  const handlePrint = () => {\n    window.print();\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-800\">Urine Analysis - Complete Urinalysis</h1>\n        <p className=\"text-slate-600\">Comprehensive urine examination and analysis</p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>New Urine Analysis</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Test ID and Patient Selection */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Test ID</Label>\n                <div className=\"flex\">\n                  <Input\n                    type=\"text\"\n                    value={formData.testId}\n                    readOnly\n                    className=\"flex-1 rounded-r-none bg-slate-50 text-slate-600\"\n                  />\n                  <Button\n                    type=\"button\"\n                    className=\"rounded-l-none bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)]\"\n                    onClick={() => setEditingTestId(true)}\n                  >\n                    <Edit3 className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Patient</Label>\n                <Select \n                  value={formData.patientId} \n                  onValueChange={(value) => setFormData(prev => ({ ...prev, patientId: value }))}\n                  required\n                >\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select patient\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {patients.map((patient) => (\n                      <SelectItem key={patient.patientId} value={patient.patientId}>\n                        {patient.patientId} - {patient.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            {/* Urine Parameters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {urineParameters.map((param) => (\n                <div key={param.name}>\n                  <Label className=\"block text-sm font-medium text-slate-700 mb-2\">\n                    {param.label}\n                  </Label>\n                  <div className=\"flex\">\n                    <Input\n                      type={param.type}\n                      step={param.step || undefined}\n                      value={formData.results[param.name] || \"\"}\n                      onChange={(e) => handleResultChange(param.name, e.target.value)}\n                      className={param.unit ? \"flex-1 rounded-r-none\" : \"w-full\"}\n                      placeholder={param.normalRange}\n                    />\n                    {param.unit && (\n                      <span className=\"px-3 py-2 bg-slate-50 border border-l-0 border-slate-300 rounded-r-lg text-sm text-slate-600\">\n                        {param.unit}\n                      </span>\n                    )}\n                  </div>\n                  <p className=\"text-xs text-slate-500 mt-1\">Normal: {param.normalRange}{param.unit && ` ${param.unit}`}</p>\n                </div>\n              ))}\n            </div>\n\n            {/* Comments */}\n            <div>\n              <Label className=\"block text-sm font-medium text-slate-700 mb-2\">Comments</Label>\n              <Textarea\n                value={formData.comments}\n                onChange={(e) => setFormData(prev => ({ ...prev, comments: e.target.value }))}\n                rows={3}\n                placeholder=\"Additional observations or notes...\"\n              />\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex space-x-4\">\n              <Button\n                type=\"submit\"\n                disabled={createTestMutation.isPending}\n                className=\"bg-[var(--medical-primary)] hover:bg-[var(--medical-primary-dark)] text-white\"\n              >\n                {createTestMutation.isPending ? \"Saving...\" : \"Save Test Results\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handlePrint}\n                className=\"text-slate-600 border-slate-300 hover:bg-slate-50\"\n              >\n                <Printer className=\"h-4 w-4 mr-2\" />\n                Print Report\n              </Button>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n\n      <EditIdModal\n        isOpen={editingTestId}\n        onClose={() => setEditingTestId(false)}\n        currentId={formData.testId}\n        idType=\"Test\"\n        onUpdate={handleIdUpdate}\n      />\n    </div>\n  );\n}\n","size_bytes":11032}}}